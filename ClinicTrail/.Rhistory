kable(out(0.003463,
0.829, 0.570, 0.498,
0.85),
caption = "Sample size calculation for MG-III-001")
kable(out(0.003463, 0.829, 0.570, 0.498, 0.85),
caption = "Sample size calculation for MG-III-001")
kable(out(0.003463,
0.650, 0.642, 0.527,
0.85),
caption = "Sample size calculation for MG-III-001")
## Scenario 2.3
## choose
t=500/600
kable(out(0.003463, 0.829, 0.570, 0.498, 0.85),
caption = "Sample size calculation for MG-III-001")
kable(out(0.003463,
0.894, 0.730, 0.533,
0.85),
caption = "Sample size calculation for MG-III-001")
install.packages("PK")
library(PK)
conc <- c(2790, 3280, 4980, 7550, 5500, 6650, 2250, 3220, 213, 636)
time <- c(1, 1, 2, 2, 4, 4, 8, 8, 24, 24)
obj <- auc(conc=conc, time=time, method=c("z", "t"), design="ssd")
print(obj)
summary(obj)
## serial sampling design: example from Nedelman et al. (1995)
conc.m <- c(391, 396, 649, 1990, 3290, 3820, 844, 1650, 75.7, 288)
conc.f <- c(353, 384, 625, 1410, 1020, 1500, 933, 1030, 0, 80.5)
time <- c(1, 1, 2, 2, 4, 4, 8, 8, 24, 24)
res1 <- auc(conc=conc.m, time=time, method=c('t','z'), design='ssd')
res2 <- auc(conc=conc.f, time=time, method=c('t','z'), design='ssd')
plot(res1, pch=19, ylim=c(0,5000), xlim=c(0,25))
plot(res2, pch=21, col='red', add=TRUE)
legend(x=25, y=5000, xjust=1, pch=c(19,21), col=c('black','red'),
legend=c('Male', 'Female'))
summary(res1)
data(Rats)
data1 <- subset(Rats,Rats$dose==100)
data2 <- subset(Rats,Rats$dose==300)
res1 <- auc(data=data1,method='t', design='batch')
res2 <- auc(data=data2,method='t', design='batch')
plot(res1, col='black', ylim=c(0,8), xlim=c(0,25))
plot(res2, col='red', add=TRUE)
legend(x=0, y=8, xjust=0, lty=1, col=c('black','red'),
legend=c('Dose of 100', 'Dose of 300'))
data3 <- subset(Rats,Rats$dose==100 | Rats$dose==300)
data3$group <- data3$dose
res3 <- auc(data=data3,method='t', design='batch')
plot(res3,bygroup=TRUE)
data(Glucose)
data1 <- subset(Glucose, date==1)
data2 <- subset(Glucose, date==2)
res1 <- auc(conc=data1$conc, time=data1$time, design='complete', method='t')
res2 <- auc(conc=data2$conc, time=data2$time, design='complete', method='t')
plot(res1, pch=19, col='black', ylim=c(0,5))
plot(res2, pch=21, col='red', add=TRUE)
plot(x=c(0, 30), y=c(0, 5), type='n', main='Complete Data Design', xlab='Time',
ylab='Concentration')
for(i in unique(Glucose$id)){
for(j in unique(Glucose$date)){
temp <- subset(Glucose, id==i & date==j)
col <- ifelse(j==1, 'black', 'red')
lty <- ifelse(j==1, 1, 2)
pch <- ifelse(j==1, 19, 21)
points(x=temp$time, y=temp$conc, col=col, lty=lty, pch=pch, type='b')
}
}
legend(x=30, y=5, xjust=1, pch=c(19,21), col=c('black','red'), lty=c(1,2),
legend=c('Date 1', 'Date 2'))
77/78
# load required package
library("knitr")
library("pwr")
library("binom")
library("binomSamSize")
one_propotion <- function(seq,p0,theta,h1,corr,power){
data <- data.frame(p1=seq,
p0=rep(p0+theta,length(seq)))
for(i in 1:length(seq)) {
data$n[i] <- pwr.p.test(h=ES.h(p1 = seq[i], p2 = p0),power=power,sig.level=0.025,alternative=h1)$n
data$wald.ne[i] <- ceiling(data$n[i])
data$Exact.Length[i] <- round(binom.length(p=seq[i], n=data$wald.ne[i],
conf.level = 0.95, method = c("exact"))$length[1], 3)
data$Exact.CI[i] <- paste("[",round(binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i], conf.level = 0.95, method = c("exact"))$lower, 3)
,",",
round(binom.confint(x=ceiling(seq[i]*data$wald.ne[i]), n=data$wald.ne[i], conf.level = 0.95, method = c("exact"))$upper, 3),"]")
data$wald.ne.drop[i] <- ceiling(data$wald.ne[i]/0.9)
}
return(data)
}
EP5 <- one_propotion(seq=seq(0.96,0.99,0.01), p0=0.89, theta=0.1, h1="greater",corr=0, power=0.8)
kable(EP5,
caption = "Sample size calculation 80% power for evaluation of a non-invasive optical biometer for axial length measurements in human eyes with dense cataracts")
158*0.05
dbinom(158,158,0.99)
dbinom(158,158,0.99)*dbinom(158,158,0.99)
154/158
132/0.9
158/0.9
246/0.9
197/0.9
263/0.9
154/158
dbinom(158,158,0.975)*dbinom(158,158,0.975)
dbinom(100,100,0.995)*dbinom(100,100,0.995)
knitr::opts_chunk$set(echo = TRUE)
# <!-- ---------------------------------------------------------------------- -->
# <!--                    1. load the required packages                       -->
# <!-- ---------------------------------------------------------------------- -->
packages<-c("pwr","tidyverse", "knitr", "papeR")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--                        2. Basic system settings                        -->
# <!-- ---------------------------------------------------------------------- -->
### get the path
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# <!-- ---------------------------------------------------------------------- -->
# <!--                         3. Load the datasets                           -->
# <!-- ---------------------------------------------------------------------- -->
load(file = "~/Data/adae.rda")
dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# <!-- ---------------------------------------------------------------------- -->
# <!--                         3. Load the datasets                           -->
# <!-- ---------------------------------------------------------------------- -->
load(file = "./Data/adae.rda")
load(file = "./Data/adsl.rda")
### Subset the population dataset ADSL on SAFFL safety flag
### consider only two treatments for comparison.
### convert all the upcase variables in ADSL and ADAE to lower case
adsl2  <- adsl %>%
rename_with(tolower) %>%
filter(saffl=='Y' & trt01a==c('Xan_Hi','Pbo')) %>%
select(usubjid,saffl,trt01a)
adae2  <- adae %>% rename_with(tolower)
View(adsl)
View(adsl2)
adsl2 %>% group_by(trt01a) %>% summarise(bign=n()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl2 %>% group_by(trt01a) %>% summarise(bign=n())
adsl2 %>% group_by(trt01a)
adsl2 %>% group_by(trt01a) %>% summarise(n=n())
adsl2 %>% group_by(trt01a) %>% summarise(bign=n())
adsl2 %>% group_by(trt01a) %>% summarise(bign=ncol())
adsl2 %>% group_by(trt01a) %>% summarise(bign=length())
### Subset the population dataset ADSL on SAFFL safety flag
### consider only two treatments for comparison.
### convert all the upcase variables in ADSL and ADAE to lower case
adsl2  <- adsl %>%
rename_with(tolower) %>%
filter(saffl=='Y' & trt01a==c('Xan_Hi','Pbo')) %>%
select(usubjid,saffl,trt01a)
adsl_cnt2 <- adsl2 %>% group_by(trt01a) %>% summarise(bign=length()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl_cnt2 <- adsl2 %>% group_by(trt01a) %>% summarise(bign=n()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl_cnt2 <- adsl2 %>% group_by(trt01a) %>% summarise(bign=count()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl2 %>% group_by(trt01a) %>% summarise(bign=count())
adsl2 %>% group_by(trt01a) %>% summarize_at(bign=n())
adsl2 %>% group_by(trt01a) %>% summarize(bign=n())
adsl_cnt2 <- adsl2 %>% group_by(trt01a) %>% dplyr::summarise(bign=count()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl_cnt2 <- adsl2 %>% group_by(trt01a) %>% dplyr::summarise(bign=n()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl2 %>% group_by(trt01a) %>% dplyr::summarise(bign=n())
adsl2 %>% group_by(trt01a) %>% dplyr::summarise(bign=n()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
knitr::opts_chunk$set(echo = TRUE)
# load package
pkgs = c("ggplot2", "ggcorrplot", "tidyverse","sjPlot")
inst = lapply(pkgs, library, character.only = TRUE)
## 10/Nov 2h
## 12/Nov 2h
## 14/Nov 2h
## 16/Nov 0.5h
## 17/Nov 2.5h
## 12/Dec 1h
## 13/Dec 1h
## Zwischen Sum 11h
## 14/Dec 0.5h
## 15/Dec 2h
## Zwischen Sum 13.5h
library(readxl)
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/2021Oct15 Yimeng/results-text.xlsx")
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk,
ImpDos,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`,
PersHaus,
`InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`,
`Face2Face[Fam]`,`Face2Face[Fachpers]`,
Eink))
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja"|Project1$`Anam[Fern]`=="Ja"|
Project1$`Anam[Inf]`=="Ja"|Project1$`Anam[Mas]`=="Ja"|
Project1$`Anam[Mum]`=="Ja"|Project1$`Anam[Roet]`=="Ja"|
Project1$`Anam[Pol]`=="Ja","Ja",ifelse(Project1$`Anam[Nicht]`=="Ja"|Project1$`Anam[Keine]`=="Ja","Nein",NA))
Project1$MediWork <- ifelse(Project1$`TaetGesBer[1]`=="Ja"|Project1$`TaetGesBer[3]`=="Ja"|
Project1$`TaetGesBer[4]`=="Ja"|Project1$`TaetGesBer[5]`=="Ja", "Ja",
ifelse(Project1$`TaetGesBer[2]`=="Ja"|Project1$`TaetGesBer[other]`=="Ja","Nein",NA))
Project1$PersHausAlone <-  ifelse(Project1$PersHaus==1,"Alleine leben",
ifelse(Project1$PersHaus>1,"Nicht alleine leben",NA))
FacFuna <- function(var){
factor(var, levels = c("Ja", "Nein"), labels = c("Ja", "Nein"), exclude = NULL)
}
FacFunb <- function(var){
factor(var,
levels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"),
labels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"))
}
FacFunc <- function(var){
factor(var,
levels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"),
labels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"))
}
FacFund <- function(var){
factor(var,
levels = c("immer", "oft","nie", "selten"),
labels = c("immer", "oft","nie", "selten"))
}
ScoreFun <- function(var){
ifelse(var == "sehr unzufrieden", -50, ifelse(
var == "eher unzufrieden", -25, ifelse(
var == "kann dazu nichts sagen", 0, ifelse(
var == "eher zufrieden", 25, ifelse(
var == "sehr zufrieden", 50, NA
)
)
)
))
}
## Score
Project1$Score_Bund <- ScoreFun(Project1$`GesuwiEin[Bund]`)
Project1$Score_BuGe <- ScoreFun(Project1$`GesuwiEin[BuGe]`)
Project1$Score_PolBund <- ScoreFun(Project1$`GesuwiEin[PolBund]`)
Project1$Score_Pei <- ScoreFun(Project1$`GesuwiEin[Pei]`)
Project1$Score_Gesu <- ScoreFun(Project1$`GesuwiEin[Gesu]`)
Project1$Score_Rki <- ScoreFun(Project1$`GesuwiEin[Rki]`)
Project1$Score_Stiko <- ScoreFun(Project1$`GesuwiEin[Stiko]`)
## Replace the missing values with 0
Project1$Score_Bund[is.na(Project1$Score_Bund)] <- 0
Project1$Score_BuGe[is.na(Project1$Score_BuGe)] <- 0
Project1$Score_PolBund[is.na(Project1$Score_PolBund)] <- 0
Project1$Score_Pei[is.na(Project1$Score_Pei)] <- 0
Project1$Score_Gesu[is.na(Project1$Score_Gesu)] <- 0
Project1$Score_Rki[is.na(Project1$Score_Rki)] <- 0
Project1$Score_Stiko[is.na(Project1$Score_Stiko)] <- 0
Project1$Govtrust <- (Project1$Score_Bund + Project1$Score_BuGe + Project1$Score_PolBund +
Project1$Score_Pei + Project1$Score_Rki + Project1$Score_Stiko + Project1$Score_Gesu)/7
### Format the variables
Project1$Sex <- as.factor(Project1$Sex)
Project1$Schulab <- as.factor(Project1$Schulab)
Project1$BerufAb <- as.factor(Project1$BerufAb)
Project1$TaetGes <- as.factor(Project1$TaetGes)
Project1$ZeitInfo <- as.factor(Project1$ZeitInfo)
Project1$zapaQualBe <- as.factor(Project1$zapaQualBe)
Project1$ZufriedAufk <- as.factor(Project1$ZufriedAufk)
Project1$ImpDos <- as.factor(Project1$ImpDos)
Project1$PersHausAlone <- as.factor(Project1$PersHausAlone)
Project1$`Face2Face[Fam]` <- as.factor(Project1$`Face2Face[Fam]`)
Project1$`Face2Face[Fachpers]` <- as.factor(Project1$`Face2Face[Fachpers]`)
Project1$Eink <- as.factor(Project1$Eink)
Project1 <- Project1 %>%
mutate(across(c(ImpfZust,PersoKenn,KennErkr,ImpfHistory,
MediWork, zapaImpf, AufklAkt,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`),FacFuna))
# Project1$ImpfZust <- factor(Project1$ImpfZust,
#                             levels = levels(addNA(Project1$ImpfZust)),
#                             labels = c(levels(Project1$ImpfZust), "Missing"),
#                             exclude = NULL)
Project1 <- Project1 %>%
mutate(across(c(`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`),FacFunb))
Project1 <- Project1 %>%
mutate(across(c(GesuZuK, GesuZuPsy),FacFunc))
Project1 <- Project1 %>%
mutate(across(c( `InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`),FacFund))
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,`GesuwiEin[Rki]`,
`GesuwiEin[Stiko]`,
Score_Bund, Score_BuGe, Score_PolBund,
Score_Pei, Score_Gesu, Score_Rki, Score_Stiko))
library(kableExtra)
kable(sapply(Project2,function(x)sum(is.na(x))),
caption = "Missing data among variables", format = "html") %>%
kable_styling(latex_options = "striped")
fit.sub3a <- glm(ImpfZust ~ age  + Govtrust + KennErkr,
data = Project2, family=binomial())
summary(fit.sub3a)
exp(-3.433427)
exp(0.027280)
knitr::opts_chunk$set(echo = TRUE)
# <!-- ---------------------------------------------------------------------- -->
# <!--                    1. load the required packages                       -->
# <!-- ---------------------------------------------------------------------- -->
packages<-c("pwr","tidyverse", "knitr", "papeR")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--                        2. Basic system settings                        -->
# <!-- ---------------------------------------------------------------------- -->
### get the path
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# <!-- ---------------------------------------------------------------------- -->
# <!--                         3. Load the datasets                           -->
# <!-- ---------------------------------------------------------------------- -->
load(file = "./Data/adae.rda")
load(file = "./Data/adsl.rda")
adsl2  <- adsl %>%
rename_with(tolower) %>%
filter(saffl=='Y' & trt01a==c('Xan_Hi','Pbo')) %>%
select(usubjid,saffl,trt01a)
adae2  <- adae %>% rename_with(tolower)
adsl_cnt2 <- adsl2 %>%
group_by(trt01a) %>%
dplyr::summarise(bign=n()) %>%
pivot_wider(names_from = trt01a, values_from = bign)
adsl_cnt2
inner_join(adsl2,adae2,by=c("usubjid"))
inner_join(adsl2,adae2,by=c("usubjid")) %>%
select(usubjid,aedecod,trt01a.x)  %>%
distinct(usubjid,aedecod,trt01a.x) %>%
group_by(trt01a.x,aedecod) %>%
summarise(cnt=n(),.groups = 'drop')
inner_join(adsl2,adae2,by=c("usubjid")) %>%
select(usubjid,aedecod,trt01a.x)  %>%
distinct(usubjid,aedecod,trt01a.x) %>%
group_by(trt01a.x,aedecod) %>%
dplyr::summarise(cnt=n(),.groups = 'drop')
adsl_adae = inner_join(adsl2,adae2,by=c("usubjid")) %>%
select(usubjid,aedecod,trt01a.x)  %>%
distinct(usubjid,aedecod,trt01a.x) %>%
group_by(trt01a.x,aedecod) %>%
dplyr::summarise(cnt=n(),.groups = 'drop') %>%
ungroup() %>%
mutate(pct=ifelse(trt01a.x=='Pbo',cnt/pbo,cnt/xan)) %>%
ungroup() %>%
arrange(aedecod,trt01a.x)
pbo <- adsl_cnt2$Pb
xan <- adsl_cnt2$Xan_Hi
### separate variables/macro variable to store those values two treatment counts
adsl_cnt2
pbo <- adsl_cnt2$Pbo
### Merge the ADSL and ADAE on usubjid variable, keep only the required variables and remove the duplicate records, group by treatment and aedecod. Get the count of each aedecod per treatment and then derive the percentage. While deriving the population we are using the macro variables pbo and xan which has the population bign count.
adsl_adae = inner_join(adsl2,adae2,by=c("usubjid")) %>%
select(usubjid,aedecod,trt01a.x)  %>%
distinct(usubjid,aedecod,trt01a.x) %>%
group_by(trt01a.x,aedecod) %>%
dplyr::summarise(cnt=n(),.groups = 'drop') %>%
ungroup() %>%
mutate(pct=ifelse(trt01a.x=='Pbo',cnt/pbo,cnt/xan)) %>%
ungroup() %>%
arrange(aedecod,trt01a.x)
adsl_adae
adsl_adae %>%
select(-pct) %>%
pivot_wider(names_from = c(trt01a.x), values_from = cnt)
adsl_adae %>%
select(-pct) %>%
pivot_wider(names_from = c(trt01a.x), values_from = cnt) %>%
mutate(nb=Pbo, na=Xan_Hi, snb=pbo, sna=xan, a=na/sna,
b=nb/snb,factor=1.96*sqrt(a*(1-a)/sna + b*(1-b)/snb),
lcl=a-b-factor,ucl=a-b+factor,mean=0.5*(lcl+ucl)) %>%
filter(!is.na(mean))
### Plot 1: AE Proportion dot plot
ggplot(adsl_adae %>% filter(aedecod %in% adsl_adae2$aedecod) %>%
arrange(desc(aedecod)),aes(x=pct,y=reorder(aedecod,desc(aedecod)))) +
geom_point(shape = 17,size=2,aes(colour = factor(trt01a.x))) +
ggtitle("Proportion") +
xlab('Proportion') + ylab('') +
scale_colour_manual(values = c("Blue", "Red")) +
theme(legend.position="bottom") + labs(col="Treatment:")
### Derive the mean relative risk, lcl and ucl
adsl_adae2 <- adsl_adae %>%
select(-pct) %>%
pivot_wider(names_from = c(trt01a.x), values_from = cnt) %>%
mutate(nb=Pbo, na=Xan_Hi, snb=pbo, sna=xan, a=na/sna,
b=nb/snb,factor=1.96*sqrt(a*(1-a)/sna + b*(1-b)/snb),
lcl=a-b-factor,ucl=a-b+factor,mean=0.5*(lcl+ucl)) %>%
filter(!is.na(mean))
### Plot 1: AE Proportion dot plot
ggplot(adsl_adae %>% filter(aedecod %in% adsl_adae2$aedecod) %>%
arrange(desc(aedecod)),aes(x=pct,y=reorder(aedecod,desc(aedecod)))) +
geom_point(shape = 17,size=2,aes(colour = factor(trt01a.x))) +
ggtitle("Proportion") +
xlab('Proportion') + ylab('') +
scale_colour_manual(values = c("Blue", "Red")) +
theme(legend.position="bottom") + labs(col="Treatment:")
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip() +  # flip coordinates (puts labels on y axis)
xlab("") + ylab("Mean (95% CI)") +
ggtitle("Risk Difference with 0.95CI")
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl))
geom_pointrange()
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl))
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip()
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl))
geom_pointrange()
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip() +  # flip coordinates (puts labels on y axis)
xlab("") + ylab("Mean (95% CI)") +
ggtitle("Risk Difference with 0.95CI")+
```
### Derive the mean relative risk, lcl and ucl
adsl_adae2 <- adsl_adae %>%
select(-pct) %>%
pivot_wider(names_from = c(trt01a.x), values_from = cnt) %>%
mutate(nb=Pbo, na=Xan_Hi, snb=pbo, sna=xan, a=na/sna,
b=nb/snb,factor=1.96*sqrt(a*(1-a)/sna + b*(1-b)/snb),
lcl=a-b-factor,ucl=a-b+factor,mean=0.5*(lcl+ucl)) %>%
filter(!is.na(mean))
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip() +  # flip coordinates (puts labels on y axis)
xlab("") + ylab("Mean (95% CI)") +
ggtitle("Risk Difference with 0.95CI")
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl))
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl))
geom_pointrange()
### Plot 2: Relative Risk
ggplot(data=adsl_adae2)
geom_pointrange(aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl))
### Plot 2: Relative Risk
ggplot(data=adsl_adae2)
geom_pointrange(aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl)) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip()
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl)) +
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip() +  # flip coordinates (puts labels on y axis)
xlab("") + ylab("Mean (95% CI)") +
ggtitle("Risk Difference with 0.95CI") +
theme(axis.text.y = element_blank(),axis.ticks = element_blank(),legend.position="none")
### Plot 2: Relative Risk
ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl)) +
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip() +  # flip coordinates (puts labels on y axis)
xlab("") + ylab("Mean (95% CI)") +
ggtitle("Risk Difference with 0.95CI") +
theme(axis.ticks = element_blank(),legend.position="none")
library(cowplot)
p2 <- ggplot(data=adsl_adae2, aes(x=reorder(aedecod,desc(aedecod)), y=mean, ymin=lcl, ymax=ucl)) +
geom_pointrange() +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
coord_flip() +  # flip coordinates (puts labels on y axis)
xlab("") + ylab("Mean (95% CI)") +
ggtitle("Risk Difference with 0.95CI") +
theme(axis.text.y = element_blank(),axis.ticks = element_blank(),legend.position="none")
p1 <- ggplot(adsl_adae %>% filter(aedecod %in% adsl_adae2$aedecod) %>%
arrange(desc(aedecod)),aes(x=pct,y=reorder(aedecod,desc(aedecod)))) +
geom_point(shape = 17,size=2,aes(colour = factor(trt01a.x))) +
ggtitle("Proportion") +
xlab('Proportion') + ylab('') +
scale_colour_manual(values = c("Blue", "Red")) +
theme(legend.position="bottom") + labs(col="Treatment:")
plot_grid(p1,  p2, labels = "AUTO",nrow = 1,rel_widths = c(0.8, 0.5))
