Project_model_complete <- Project_model[complete.cases(Project_model),]
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment + quality_doctor_treantment +Govtrust  + zapaImpf,data = Project_model_complete, family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment +Govtrust  + zapaImpf,data = Project_model_complete, family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment +Govtrust  + zapaImpf,data = Project_model, family=binomial())
tab_model(Model.full)
library(bestglm)
## bestglm
## The outcome variable must be named y, no extraneous variables should be present in the dataset.
table(Project_model$ImpfZust)
library(bestglm)
Project_model.bestglm <- Project_model %>%
mutate(y = if_else(ImpfZust=="Nein",0,1)) %>%
dplyr::select(-ImpfZust)
Project_model.bestglm <- data.frame(Project_model.bestglm)
Best.model.AIC <-
bestglm(Xy = Project_model.bestglm,
family = binomial,          # binomial family for logistic
IC = "AIC",                 # Information criteria for
method = "exhaustive")
View(Project_model.bestglm)
## bestglm
## The outcome variable must be named y, no extraneous variables should be present in the dataset.
table(Project_model$ImpfZust)
Project_model <- Project2 %>%
dplyr::select(ImpfZust, age, Sex, Abitur, Educational_attainment, Employment_status,
Healthcare_related_job, Monthly_income,  Household_size, ImpfHistory,
quality_doctor_treantment, zapaImpf, Satisfaction_doctor_explanation, Govtrust) %>%
filter(ImpfZust != "")
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment +Govtrust  + zapaImpf,data = Project_model, family=binomial())
library(MASS)
Model.Step <- Model.full %>% stepAIC(trace = FALSE)
?stepAIC
Project_model_complete <- Project_model[complete.cases(Project_model),]
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory  +Govtrust  + zapaImpf,data = Project_model_complete, family=binomial())
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income,data = Project_model_complete, family=binomial())
Model.Step <- Model.full %>% stepAIC(trace = FALSE)
library(mice)
md.pattern(Project_model)
imp1 <- mice(Project_model, m = 5)
fitm <- with(imp1, glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment +Govtrust  + zapaImpf,family=binomial()))
summary(fitm)
tab_model(fitm)
summary(pool(fitm))
tab_model(pool(fitm))
summary(pool(fitm)) %>% kable()
summary(pool(fitm)) %>% kable(caption = "Mice pooling results", format = "html") %>%
kable_styling(latex_options = "striped")
Project_model_impute <- complete(imp1, 1)
View(Project_model_impute)
complete(imp1, 1)
Project_model_impute <- complete(imp1)
View(Project_model_impute)
md.pattern(Project_model_impute)
md.pattern(Project_model)
md.pairs(Project_model_impute)
Project_model <- Project_model %>% dplyr::select(-Satisfaction_doctor_explanation)
library(mice)
md.pattern(Project_model)
imp1 <- mice(Project_model, m = 5)
fitm <- with(imp1, glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment +Govtrust  + zapaImpf,family=binomial()))
summary(pool(fitm)) %>% kable(caption = "Mice pooling results", format = "html") %>%
kable_styling(latex_options = "striped")
Project_model_impute <- complete(imp1)
md.pattern(Project_model_impute)
Project_model_impute <- complete(imp1,2)
md.pattern(Project_model_impute)
imp1 <- mice(Project_model, m = 5)
imp1$loggedEvents
library(ggcorrplot)
cor <- model.matrix(~0+., data=Project_model %>% dplyr::select(-ImpfZust)) %>%
cor(use="pairwise.complete.obs")
cor %>%
ggcorrplot(show.diag = T, method = "circle", type="lower", lab=TRUE, lab_size=3)
knitr::opts_chunk$set(echo = TRUE)
# load package
pkgs = c("ggcorrplot", "tidyverse","kableExtra", "sjPlot")
inst = lapply(pkgs, library, character.only = TRUE)
## 03.06 9:10-09.40
## 03.11 13:00-16:00, 20:30-21:10
library(readxl)
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/2021Oct15 Yimeng/Project/results-text.xlsx")
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,ImpfMot,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk,
ImpDos,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`,
PersHaus,
`InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`,
`Face2Face[Fam]`,`Face2Face[Fachpers]`,
Eink))
# table(Project1$ImpfMot, Project1$ImpfZust)
# tabelcheck <- table(Project1$ImpfZust)
# tabelcheck
Project1 <- Project1 %>%
mutate(ImpfZust = ifelse(ImpfMot=="Ja" | ImpfZust == "Ja" , "Ja", "Nein"))
# table(Project1$ImpfZust)
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja"|Project1$`Anam[Fern]`=="Ja"|
Project1$`Anam[Inf]`=="Ja"|Project1$`Anam[Mas]`=="Ja"|
Project1$`Anam[Mum]`=="Ja"|Project1$`Anam[Roet]`=="Ja"|
Project1$`Anam[Pol]`=="Ja","Ja",ifelse(Project1$`Anam[Nicht]`=="Ja"|Project1$`Anam[Keine]`=="Ja","Nein",NA))
Project1$MediWork <- ifelse(Project1$`TaetGesBer[1]`=="Ja"|Project1$`TaetGesBer[3]`=="Ja"|
Project1$`TaetGesBer[4]`=="Ja"|Project1$`TaetGesBer[5]`=="Ja", "Ja",
ifelse(Project1$`TaetGesBer[2]`=="Ja"|Project1$`TaetGesBer[other]`=="Ja","Nein",NA))
Project1$PersHausAlone <-  ifelse(Project1$PersHaus==1,"Alleine leben",
ifelse(Project1$PersHaus>1,"Nicht alleine leben",NA))
FacFuna <- function(var){
factor(var, levels = c("Ja", "Nein"), labels = c("Ja", "Nein"), exclude = NULL)
}
FacFunb <- function(var){
factor(var,
levels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"),
labels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"))
}
FacFunc <- function(var){
factor(var,
levels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"),
labels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"))
}
FacFund <- function(var){
factor(var,
levels = c("immer", "oft","nie", "selten"),
labels = c("immer", "oft","nie", "selten"))
}
ScoreFun <- function(var){
ifelse(var == "sehr unzufrieden", -50, ifelse(
var == "eher unzufrieden", -25, ifelse(
var == "kann dazu nichts sagen", 0, ifelse(
var == "eher zufrieden", 25, ifelse(
var == "sehr zufrieden", 50, NA
)
)
)
))
}
## Score
Project1$Score_Bund <- ScoreFun(Project1$`GesuwiEin[Bund]`)
Project1$Score_BuGe <- ScoreFun(Project1$`GesuwiEin[BuGe]`)
Project1$Score_PolBund <- ScoreFun(Project1$`GesuwiEin[PolBund]`)
Project1$Score_Pei <- ScoreFun(Project1$`GesuwiEin[Pei]`)
Project1$Score_Gesu <- ScoreFun(Project1$`GesuwiEin[Gesu]`)
Project1$Score_Rki <- ScoreFun(Project1$`GesuwiEin[Rki]`)
Project1$Score_Stiko <- ScoreFun(Project1$`GesuwiEin[Stiko]`)
## Replace the missing values with 0
Project1$Score_Bund[is.na(Project1$Score_Bund)] <- 0
Project1$Score_BuGe[is.na(Project1$Score_BuGe)] <- 0
Project1$Score_PolBund[is.na(Project1$Score_PolBund)] <- 0
Project1$Score_Pei[is.na(Project1$Score_Pei)] <- 0
Project1$Score_Gesu[is.na(Project1$Score_Gesu)] <- 0
Project1$Score_Rki[is.na(Project1$Score_Rki)] <- 0
Project1$Score_Stiko[is.na(Project1$Score_Stiko)] <- 0
Project1$Govtrust <- (Project1$Score_Bund + Project1$Score_BuGe + Project1$Score_PolBund +
Project1$Score_Pei + Project1$Score_Rki + Project1$Score_Stiko + Project1$Score_Gesu)/7
### Format the variables
Project1$Sex <- as.factor(Project1$Sex)
Project1$Schulab <- as.factor(Project1$Schulab)
Project1$BerufAb <- as.factor(Project1$BerufAb)
Project1$TaetGes <- as.factor(Project1$TaetGes)
Project1$ZeitInfo <- as.factor(Project1$ZeitInfo)
Project1$zapaQualBe <- as.factor(Project1$zapaQualBe)
Project1$ZufriedAufk <- as.factor(Project1$ZufriedAufk)
Project1$ImpDos <- as.factor(Project1$ImpDos)
Project1$PersHausAlone <- as.factor(Project1$PersHausAlone)
Project1$`Face2Face[Fam]` <- as.factor(Project1$`Face2Face[Fam]`)
Project1$`Face2Face[Fachpers]` <- as.factor(Project1$`Face2Face[Fachpers]`)
Project1$Eink <- as.factor(Project1$Eink)
Project1 <- Project1 %>%
mutate(across(c(ImpfZust,PersoKenn,KennErkr,ImpfHistory,
MediWork, zapaImpf, AufklAkt,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`),FacFuna))
# Project1$ImpfZust <- factor(Project1$ImpfZust,
#                             levels = levels(addNA(Project1$ImpfZust)),
#                             labels = c(levels(Project1$ImpfZust), "Missing"),
#                             exclude = NULL)
Project1 <- Project1 %>%
mutate(across(c(`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`),FacFunb))
Project1 <- Project1 %>%
mutate(across(c(GesuZuK, GesuZuPsy),FacFunc))
Project1 <- Project1 %>%
mutate(across(c( `InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`),FacFund))
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,`GesuwiEin[Rki]`,
`GesuwiEin[Stiko]`,
Score_Bund, Score_BuGe, Score_PolBund,
Score_Pei, Score_Gesu, Score_Rki, Score_Stiko))
## New Variable Abitur
Project2$Abitur=NULL
Project2$Abitur[Project2$Schulab=="Abitur/ Fachabitur"]="Ja"
Project2$Abitur[Project2$Schulab=="Hauptschulabschluss"]="Nein"
Project2$Abitur[Project2$Schulab=="Realschulabschluss"]="Nein"
Project2$Abitur[Project2$Schulab=="Sonstiges"]="Nein"
Project2$Abitur <- as.factor(Project2$Abitur)
## New variable Educational attainment, Employment status, Healthcare related job
## Monthly income, Household size
Project2 <- Project2 %>%
mutate(Educational_attainment = case_when( BerufAb == "Keinen beruflichen Abschluss" ~ "No occupational degree",
BerufAb == "Beruflich-betriebliche Ausbildung" ~ "Occupational training",
BerufAb == "(Fach-)Hochschulabschluss (Bachelor/ Master, Diplom/ Magister)" ~ "University degree",
BerufAb == "Hochschulabschluss (Promotion, Habilitation)" ~ "University degree",
BerufAb == "Staatsexamen" ~ "University degree",
BerufAb == "Sonstiges" ~ "Others"),
Employment_status = `ErwerbStat[1]`,
Healthcare_related_job = TaetGes,
Monthly_income = case_when(
Eink == "Unter 500€" ~ "<1.000",
Eink == "500 bis unter 1.000€" ~ "<1.000",
Eink == "1.000 bis unter 1.500€" ~ "1.000-2.000",
Eink == "1.500 bis unter 2.000€" ~ "1.000-2.000",
Eink == "2.000 bis unter 3.000€" ~ "2.000-4.000",
Eink == "3.000 bis unter 4.000€" ~ "2.000-4.000",
Eink == "4.000 bis unter 5.000€" ~ ">4.000",
Eink == "5.000 bis unter 6.000€" ~ ">4.000",
Eink == "6.000€ und mehr" ~ ">4.000"
),
Household_size = PersHausAlone,
quality_doctor_treantment = case_when(
zapaQualBe == "Sehr hoch" ~ "Very high",
zapaQualBe == "Eher hoch" ~ "Rather highh",
zapaQualBe == "Sehr gering" ~ "Rather/Very low",
zapaQualBe == "Eher gering" ~ "Rather/Very low"
),
Satisfaction_doctor_explanation = case_when(
ZufriedAufk == "Sehr zufrieden" ~ "Very high",
ZufriedAufk == "Eher zufrieden" ~ "Rather high",
ZufriedAufk == "Sehr unzufrieden" ~ "Rather/Very low",
ZufriedAufk == "Eher unzufrieden" ~ "Rather/Very low"
) )
## Change the outcome level
Project2$ImpfZust <- factor(Project2$ImpfZust, levels = c("Nein", "Ja"))
## HTML Output
library(papeR)
Project_DecConti <- papeR::summarize(Project2, type = "numeric", group = "ImpfZust", show.NAs = T,digits.pval = 3, smallest.pval = 0.05)
rownames(Project_DecConti) <- NULL
kable(Project_DecConti, caption = "Descriptive statistics of continious variables", format = "html") %>%
kable_styling(latex_options = "striped")
## "BerufAb", "Eink"
Project_DecCate1 <- papeR::summarize(Project2 %>% dplyr::select(-BerufAb,-Eink),
type = "factor",
group = "ImpfZust",
smallest.pval = 0.05)
names(Project_DecCate1) <- c("Variable","Category","A",
"N (nicht geimpft)","% (nicht geimpft)","B",
"N (geimpft)","% (geimpft)","C",
"N (missing)","% (missing)","D","p.value")
Project_DecCate1 <- Project_DecCate1[-12]
Project_DecCate2 <- papeR::summarize(Project2 %>% dplyr::select(ImpfZust, BerufAb, Eink),
type = "factor",
group = "ImpfZust",
test = F,
smallest.pval = 0.05)
names(Project_DecCate2) <- c("Variable","Category","A",
"N (nicht geimpft)","% (nicht geimpft)","B",
"N (geimpft)","% (geimpft)","C",
"N (missing)","% (missing)")
xtable <- table(Project2 %>%  dplyr::select(ImpfZust, BerufAb))
BerufAb_p <- fisher.test(xtable,simulate.p.value=TRUE)
BerufAb_p <- "<0.05"
Project_DecCate2$p.value <- BerufAb_p
Project_DecCate2$p.value[-1] <- ""
Project_DecCate <- rbind(Project_DecCate1, Project_DecCate2)
Project_DecCate <- Project_DecCate[-c(10:11)]
names(Project_DecCate) <- c("Variable","Category"," ",
"N (nicht geimpft)","% (nicht geimpft)"," ",
"N (geimpft)","% (geimpft)"," ","p.value")
rownames(Project_DecCate) <- NULL
kable(Project_DecCate, caption = "Descriptive statistics of categorical variables", format = "html") %>%
kable_styling(latex_options = "striped")
theme_set(theme_bw())
ggplot(data = Project2) +
geom_histogram(mapping = aes(x = age, fill=ImpfZust),
binwidth = 2, col="black", size=.1)+
labs(title="Histogram to explore the citinious variables",
subtitle="Question 1/1: Bitte geben Sie Ihr Alter in Jahren an")
Project_model <- Project2 %>%
dplyr::select(ImpfZust, age, Sex, Abitur, Educational_attainment, Employment_status,
Healthcare_related_job, Monthly_income,  Household_size, ImpfHistory,
quality_doctor_treantment, zapaImpf, Satisfaction_doctor_explanation, Govtrust) %>%
filter(ImpfZust != "")
Project_model$Educational_attainment <- as.factor(Project_model$Educational_attainment)
Project_model$Monthly_income <- as.factor(Project_model$Monthly_income)
Project_model$quality_doctor_treantment <- as.factor(Project_model$quality_doctor_treantment)
Project_model$Satisfaction_doctor_explanation <- as.factor(Project_model$Satisfaction_doctor_explanation)
Project_DecCate2 <- papeR::summarize(Project_model,
type = "factor",
group = "ImpfZust",
test = F,
smallest.pval = 0.05)
Project_DecCate2 %>% kable(caption = "Descriptive statistics of selected variables for modeling", format = "html") %>%
kable_styling(latex_options = "striped")
names(Project2)
Unimodel.age <- glm(ImpfZust ~ age, data = Project_model, family=binomial())
tab_model(Unimodel.age, title="Univariate logistic regression for age" )
## relevel
Project_model$Sex <- relevel(Project_model$Sex, ref = "Männlich")
Unimodel.Sex <- glm(ImpfZust ~ Sex, data = Project_model %>% filter(Sex == "Männlich"|Sex == "Weiblich"), family=binomial())
tab_model(Unimodel.Sex, title="Univariate logistic regression for Sex" )
# Same results
# Unimodel.Sex <- glm(ImpfZust ~ Sex, data = Project_model, family=binomial())
# tab_model(Unimodel.Sex, title="Univariate logistic regression for Sex" )
Project_model$Abitur <- relevel(Project_model$Abitur, ref = "Nein")
Unimodel.Abitur <- glm(ImpfZust ~ Abitur, data = Project_model, family=binomial())
tab_model(Unimodel.Abitur, title="Univariate logistic regression for Abitur" )
Unimodel.Educational_attainment <- glm(ImpfZust ~ Educational_attainment, data = Project_model, family=binomial())
tab_model(Unimodel.Educational_attainment, title="Univariate logistic regression for Educational attainment" )
Project_model$Employment_status <- relevel(Project_model$Employment_status, ref = "Nein")
Unimodel.Employment_status <- glm(ImpfZust ~ Employment_status , data = Project_model, family=binomial())
tab_model(Unimodel.Employment_status  , title="Univariate logistic regression for Employment status" )
Project_model$Healthcare_related_job <- relevel(Project_model$Healthcare_related_job, ref = "Nein")
Unimodel.Healthcare_related_job <- glm(ImpfZust ~ Healthcare_related_job, data = Project_model, family=binomial())
tab_model(Unimodel.Healthcare_related_job   , title="Univariate logistic regression for Healthcare_related_job" )
Unimodel.Monthly_income <- glm(ImpfZust ~ Monthly_income, data = Project_model, family=binomial())
tab_model(Unimodel.Monthly_income   , title="Univariate logistic regression for Monthly_income" )
Unimodel.Household_size <- glm(ImpfZust ~ Household_size, data = Project_model, family=binomial())
tab_model(Unimodel.Household_size   , title="Univariate logistic regression for Household_size" )
Project_model$ImpfHistory <- relevel(Project_model$ImpfHistory, ref = "Nein")
Unimodel.ImpfHistory <- glm(ImpfZust ~ ImpfHistory, data = Project_model, family=binomial())
tab_model(Unimodel.ImpfHistory   , title="Univariate logistic regression for ImpfHistory" )
Project_model$quality_doctor_treantment <- as.factor(Project_model$quality_doctor_treantment)
Project_model$quality_doctor_treantment <- relevel(Project_model$quality_doctor_treantment, ref = "Rather/Very low")
Unimodel.quality_doctor_treantment <- glm(ImpfZust ~ quality_doctor_treantment, data = Project_model, family=binomial())
tab_model(Unimodel.quality_doctor_treantment   , title="Univariate logistic regression for Evaluation of the quality of doctor treantment " )
Project_model$zapaImpf <- relevel(Project_model$zapaImpf, ref = "Nein")
Unimodel.zapaImpf <- glm(ImpfZust ~ zapaImpf, data = Project_model, family=binomial())
tab_model(Unimodel.zapaImpf   , title="Univariate logistic regression for Did the doctor give a detailed explanation about the corona vaccine" )
Project_model$Satisfaction_doctor_explanation <-  as.factor(Project_model$Satisfaction_doctor_explanation)
Project_model$Satisfaction_doctor_explanation <- relevel(Project_model$Satisfaction_doctor_explanation, ref = "Rather/Very low")
Unimodel.Satisfaction_doctor_explanation <- glm(ImpfZust ~ Satisfaction_doctor_explanation, data = Project_model, family=binomial())
tab_model(Unimodel.Satisfaction_doctor_explanation   , title="Univariate logistic regression for Satisfaction with the doctor explanation about vaccine " )
Unimodel.Govtrust <- glm(ImpfZust ~ Govtrust, data = Project_model, family=binomial())
tab_model(Unimodel.Govtrust   , title="Univariate logistic regression for" )
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment + Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
## the higher the value of VIF and the higher the multicollinearity with the particular independent variable.
## VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others
performance::check_collinearity(Model.full)
tab_model(Model.full)
Project_model <- Project_model %>% dplyr::select(-Satisfaction_doctor_explanation)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  Satisfaction_doctor_explanation + Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
Project_model <- Project2 %>%
dplyr::select(ImpfZust, age, Sex, Abitur, Educational_attainment, Employment_status,
Healthcare_related_job, Monthly_income,  Household_size, ImpfHistory,
quality_doctor_treantment, zapaImpf, Satisfaction_doctor_explanation, Govtrust) %>%
filter(ImpfZust != "")
Project_model$Educational_attainment <- as.factor(Project_model$Educational_attainment)
Project_model$Monthly_income <- as.factor(Project_model$Monthly_income)
Project_model$quality_doctor_treantment <- as.factor(Project_model$quality_doctor_treantment)
Project_model$Satisfaction_doctor_explanation <- as.factor(Project_model$Satisfaction_doctor_explanation)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  Satisfaction_doctor_explanation + Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
str(Project_model)
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment + Satisfaction_doctor_explanation + Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment + Satisfaction_doctor_explanation + Govtrust,data = na.omit(Project_model), family=binomial())
## the higher the value of VIF and the higher the multicollinearity with the particular independent variable.
## VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others
performance::check_collinearity(Model.full)
tab_model(Model.full)
str(Project_model)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust  + zapaImpf,data = na.omit(Project_model), family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust  + zapaImpf +Satisfaction_doctor_explanation,data = na.omit(Project_model), family=binomial())
str(Project_model)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust +Satisfaction_doctor_explanation,data = na.omit(Project_model), family=binomial())
## the higher the value of VIF and the higher the multicollinearity with the particular independent variable.
## VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others
performance::check_collinearity(Model.full)
tab_model(Model.full)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust +Satisfaction_doctor_explanation + zapaImpf,data = na.omit(Project_model), family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust + zapaImpf,data = na.omit(Project_model), family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + Satisfaction_doctor_explanation  + Govtrust + zapaImpf,data = na.omit(Project_model), family=binomial())
str(Project_model)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + Satisfaction_doctor_explanation  + Govtrust + zapaImpf,data = Project_model, family=binomial())
str(Project_model)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust + zapaImpf,data = Project_model, family=binomial())
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust + zapaImpf,data = Project_model, family=binomial())
## the higher the value of VIF and the higher the multicollinearity with the particular independent variable.
## VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others
performance::check_collinearity(Model.full)
tab_model(Model.full)
library(MASS)
Model.Step <- Model.full %>% stepAIC(trace = FALSE)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + quality_doctor_treantment  + Govtrust + zapaImpf,data = Project_model, family=binomial())
str(Project_model)
## the higher the value of VIF and the higher the multicollinearity with the particular independent variable.
## VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others
performance::check_collinearity(Model.full)
tab_model(Model.full)
Project_model <- Project_model %>% dplyr::select(-Satisfaction_doctor_explanation)
## detects multicollinearity
library(mice)
md.pattern(Project_model)
imp1 <- mice(Project_model, seed=123,m=5, meth='pmm')
pred1 <- imp1$pred
imp1$loggedEvents
pred2 <- matrix(rep(0,13*13),13,13)
pred2[lower.tri(pred2)] <- 1
pred2[upper.tri(pred2)] <- 1
imp2 <- mice(Project_model, pred=pred2, seed=123,m=5, meth='pmm')
imp2$loggedEvents
fitm <- with(imp1, glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment +Govtrust  + zapaImpf,family=binomial()))
summary(pool(fitm)) %>% kable(caption = "Mice pooling results", format = "html") %>%
kable_styling(latex_options = "striped")
## get the imputed datasets
Project_model_impute <- complete(imp2,2)
md.pattern(Project_model_impute)
md.pairs(Project_model_impute)
## new full model for imputed datasets
Model.full.imputed <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory +  quality_doctor_treantment + Govtrust  + zapaImpf,data = Project_model_impute, family=binomial())
## Model VIF check
performance::check_collinearity(Model.full.imputed)
## Performance comparsion
tab_model(Model.full, Model.full.imputed)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory + Satisfaction_doctor_explanation  + Govtrust + zapaImpf,data = na.omit(Project_model), family=binomial())
library(MASS)
Model.Step <- Model.full %>% stepAIC(trace = FALSE)
## fit full model
Model.full <- glm(ImpfZust ~ age + Abitur + Educational_attainment + Monthly_income + ImpfHistory  + Govtrust + zapaImpf,data = na.omit(Project_model), family=binomial())
library(MASS)
Model.Step <- Model.full %>% stepAIC(trace = FALSE)
library(bestglm)
Project_model.bestglm <- na.omit(Project_model) %>%
mutate(y = if_else(ImpfZust=="Nein",0,1)) %>%
dplyr::select(y, age, Abitur, Educational_attainment, Monthly_income, ImpfHistory, quality_doctor_treantment, Govtrust, zapaImpf)
Project_model.bestglm <- data.frame(Project_model.bestglm)
# str(Project_model.bestglm)
Best.model.AIC <-
bestglm(Xy = Project_model.bestglm,
family = binomial,          # binomial family for logistic
IC = "AIC",                 # Information criteria for
method = "exhaustive")
Model.selection2 <- glm(ImpfZust ~ age + Educational_attainment + ImpfHistory + quality_doctor_treantment + Govtrust,data = na.omit(Project_model), family=binomial())
tab_model(Model.full, Model.selection2)
# Metrics("Best Model (BIC)", Best.model.BIC$BestModel)
library(glmnet)
x <- as.matrix(Project_model.bestglm %>% dplyr::select(-y) %>% mutate_if(is.factor,as.numeric))
y <- Project_model.bestglm$y
## Set the value of measure to the area under the curve (auc) and use 5-fold cross-validation
set.seed(3)
fitCV <- cv.glmnet(x, y, family = "binomial",
type.measure = "auc",
nfolds = 5)
# fitCV$lambda.1se
coef <- coef(fitCV, s = "lambda.1se")
Model.selection3 <- glm(ImpfZust ~ age + Govtrust + zapaImpf,  data = na.omit(Project_model), family=binomial())
tab_model(Model.full, Model.selection3)
Metrics <- function(modelname, model){
cbind(Model=modelname,
glance(model) %>% dplyr::select(logLik, AIC, BIC, df.residual),
Tjur_R2=round(performance::r2_tjur(model),3))
}
Model_summery_best <- rbind(Metrics("Full model", Model.full),
Metrics("Full model imputed", Model.full.imputed),
Metrics("Best Model 1", Model.selection1),
Metrics("Best Model 2", Model.selection2),
Metrics("Best Model 3", Model.selection3))
rownames(Model_summery_best) <- NULL
Model_summery_best %>%
kable(caption = "Results of models compason", format = "html") %>%
kable_styling(latex_options = "striped")
