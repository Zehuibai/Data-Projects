}
FacFund <- function(var){
factor(var,
levels = c("immer", "oft","nie", "selten"),
labels = c("immer", "oft","nie", "selten"))
}
ScoreFun <- function(var){
ifelse(var == "sehr unzufrieden", -50, ifelse(
var == "eher unzufrieden", -25, ifelse(
var == "kann dazu nichts sagen", 0, ifelse(
var == "eher zufrieden", 25, ifelse(
var == "sehr zufrieden", 50, NA
)
)
)
))
}
## Score
Project1$Score_Bund <- ScoreFun(Project1$`GesuwiEin[Bund]`)
Project1$Score_BuGe <- ScoreFun(Project1$`GesuwiEin[BuGe]`)
Project1$Score_PolBund <- ScoreFun(Project1$`GesuwiEin[PolBund]`)
Project1$Score_Pei <- ScoreFun(Project1$`GesuwiEin[Pei]`)
Project1$Score_Gesu <- ScoreFun(Project1$`GesuwiEin[Gesu]`)
Project1$Score_Rki <- ScoreFun(Project1$`GesuwiEin[Rki]`)
Project1$Score_Stiko <- ScoreFun(Project1$`GesuwiEin[Stiko]`)
## Replace the missing values with 0
Project1$Score_Bund[is.na(Project1$Score_Bund)] <- 0
Project1$Score_BuGe[is.na(Project1$Score_BuGe)] <- 0
Project1$Score_PolBund[is.na(Project1$Score_PolBund)] <- 0
Project1$Score_Pei[is.na(Project1$Score_Pei)] <- 0
Project1$Score_Gesu[is.na(Project1$Score_Gesu)] <- 0
Project1$Score_Rki[is.na(Project1$Score_Rki)] <- 0
Project1$Score_Stiko[is.na(Project1$Score_Stiko)] <- 0
Project1$Govtrust <- (Project1$Score_Bund + Project1$Score_BuGe + Project1$Score_PolBund +
Project1$Score_Pei + Project1$Score_Rki + Project1$Score_Stiko + Project1$Score_Gesu)/7
### Format the variables
Project1$Sex <- as.factor(Project1$Sex)
Project1$Schulab <- as.factor(Project1$Schulab)
Project1$BerufAb <- as.factor(Project1$BerufAb)
Project1$TaetGes <- as.factor(Project1$TaetGes)
Project1$ZeitInfo <- as.factor(Project1$ZeitInfo)
Project1$zapaQualBe <- as.factor(Project1$zapaQualBe)
Project1$ZufriedAufk <- as.factor(Project1$ZufriedAufk)
Project1$ImpDos <- as.factor(Project1$ImpDos)
Project1$PersHausAlone <- as.factor(Project1$PersHausAlone)
Project1$`Face2Face[Fam]` <- as.factor(Project1$`Face2Face[Fam]`)
Project1$`Face2Face[Fachpers]` <- as.factor(Project1$`Face2Face[Fachpers]`)
Project1$Eink <- as.factor(Project1$Eink)
Project1 <- Project1 %>%
mutate(across(c(ImpfZust,PersoKenn,KennErkr,ImpfHistory,
MediWork, zapaImpf, AufklAkt,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`),FacFuna))
# Project1$ImpfZust <- factor(Project1$ImpfZust,
#                             levels = levels(addNA(Project1$ImpfZust)),
#                             labels = c(levels(Project1$ImpfZust), "Missing"),
#                             exclude = NULL)
Project1 <- Project1 %>%
mutate(across(c(`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`),FacFunb))
Project1 <- Project1 %>%
mutate(across(c(GesuZuK, GesuZuPsy),FacFunc))
Project1 <- Project1 %>%
mutate(across(c( `InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`),FacFund))
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,`GesuwiEin[Rki]`,
`GesuwiEin[Stiko]`,
Score_Bund, Score_BuGe, Score_PolBund,
Score_Pei, Score_Gesu, Score_Rki, Score_Stiko))
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
# load package
pkgs = c("ggplot2", "ggcorrplot", "tidyverse","sjPlot")
inst = lapply(pkgs, library, character.only = TRUE)
library(readxl)
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/2021Oct15 Yimeng/results-text.xlsx")
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk,
ImpDos,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`,
PersHaus,
`InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`,
`Face2Face[Fam]`,`Face2Face[Fachpers]`,
Eink))
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja"|Project1$`Anam[Fern]`=="Ja"|
Project1$`Anam[Inf]`=="Ja"|Project1$`Anam[Mas]`=="Ja"|
Project1$`Anam[Mum]`=="Ja"|Project1$`Anam[Roet]`=="Ja"|
Project1$`Anam[Pol]`=="Ja","Ja",ifelse(Project1$`Anam[Nicht]`=="Ja"|Project1$`Anam[Keine]`=="Ja","Nein",NA))
Project1$MediWork <- ifelse(Project1$`TaetGesBer[1]`=="Ja"|Project1$`TaetGesBer[3]`=="Ja"|
Project1$`TaetGesBer[4]`=="Ja"|Project1$`TaetGesBer[5]`=="Ja", "Ja",
ifelse(Project1$`TaetGesBer[2]`=="Ja"|Project1$`TaetGesBer[other]`=="Ja","Nein",NA))
Project1$PersHausAlone <-  ifelse(Project1$PersHaus==1,"Alleine leben",
ifelse(Project1$PersHaus>1,"Nicht alleine leben",NA))
FacFuna <- function(var){
factor(var, levels = c("Ja", "Nein"), labels = c("Ja", "Nein"), exclude = NULL)
}
FacFunb <- function(var){
factor(var,
levels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"),
labels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"))
}
FacFunc <- function(var){
factor(var,
levels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"),
labels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"))
}
FacFund <- function(var){
factor(var,
levels = c("immer", "oft","nie", "selten"),
labels = c("immer", "oft","nie", "selten"))
}
ScoreFun <- function(var){
ifelse(var == "sehr unzufrieden", -50, ifelse(
var == "eher unzufrieden", -25, ifelse(
var == "kann dazu nichts sagen", 0, ifelse(
var == "eher zufrieden", 25, ifelse(
var == "sehr zufrieden", 50, NA
)
)
)
))
}
## Score
Project1$Score_Bund <- ScoreFun(Project1$`GesuwiEin[Bund]`)
Project1$Score_BuGe <- ScoreFun(Project1$`GesuwiEin[BuGe]`)
Project1$Score_PolBund <- ScoreFun(Project1$`GesuwiEin[PolBund]`)
Project1$Score_Pei <- ScoreFun(Project1$`GesuwiEin[Pei]`)
Project1$Score_Gesu <- ScoreFun(Project1$`GesuwiEin[Gesu]`)
Project1$Score_Rki <- ScoreFun(Project1$`GesuwiEin[Rki]`)
Project1$Score_Stiko <- ScoreFun(Project1$`GesuwiEin[Stiko]`)
## Replace the missing values with 0
Project1$Score_Bund[is.na(Project1$Score_Bund)] <- 0
Project1$Score_BuGe[is.na(Project1$Score_BuGe)] <- 0
Project1$Score_PolBund[is.na(Project1$Score_PolBund)] <- 0
Project1$Score_Pei[is.na(Project1$Score_Pei)] <- 0
Project1$Score_Gesu[is.na(Project1$Score_Gesu)] <- 0
Project1$Score_Rki[is.na(Project1$Score_Rki)] <- 0
Project1$Score_Stiko[is.na(Project1$Score_Stiko)] <- 0
Project1$Govtrust <- (Project1$Score_Bund + Project1$Score_BuGe + Project1$Score_PolBund +
Project1$Score_Pei + Project1$Score_Rki + Project1$Score_Stiko + Project1$Score_Gesu)/7
### Format the variables
Project1$Sex <- as.factor(Project1$Sex)
Project1$Schulab <- as.factor(Project1$Schulab)
Project1$BerufAb <- as.factor(Project1$BerufAb)
Project1$TaetGes <- as.factor(Project1$TaetGes)
Project1$ZeitInfo <- as.factor(Project1$ZeitInfo)
Project1$zapaQualBe <- as.factor(Project1$zapaQualBe)
Project1$ZufriedAufk <- as.factor(Project1$ZufriedAufk)
Project1$ImpDos <- as.factor(Project1$ImpDos)
Project1$PersHausAlone <- as.factor(Project1$PersHausAlone)
Project1$`Face2Face[Fam]` <- as.factor(Project1$`Face2Face[Fam]`)
Project1$`Face2Face[Fachpers]` <- as.factor(Project1$`Face2Face[Fachpers]`)
Project1$Eink <- as.factor(Project1$Eink)
Project1 <- Project1 %>%
mutate(across(c(ImpfZust,PersoKenn,KennErkr,ImpfHistory,
MediWork, zapaImpf, AufklAkt,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`),FacFuna))
# Project1$ImpfZust <- factor(Project1$ImpfZust,
#                             levels = levels(addNA(Project1$ImpfZust)),
#                             labels = c(levels(Project1$ImpfZust), "Missing"),
#                             exclude = NULL)
Project1 <- Project1 %>%
mutate(across(c(`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`),FacFunb))
Project1 <- Project1 %>%
mutate(across(c(GesuZuK, GesuZuPsy),FacFunc))
Project1 <- Project1 %>%
mutate(across(c( `InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`),FacFund))
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,`GesuwiEin[Rki]`,
`GesuwiEin[Stiko]`,
Score_Bund, Score_BuGe, Score_PolBund,
Score_Pei, Score_Gesu, Score_Rki, Score_Stiko))
library(kableExtra)
# kable(sapply(Project2,function(x)sum(is.na(x))),
#       caption = "Missing data among variables", format = "html") %>%
#   kable_styling(latex_options = "striped")
library(papeR)
Project_DecConti <- papeR::summarize(Project2, type = "numeric", group = "ImpfZust", show.NAs = T,digits.pval = 3, smallest.pval = 0.05)
xtable(Project_DecConti)
?xtable
library(papeR)
Project_DecConti <- papeR::summarize(Project2, type = "numeric", group = "ImpfZust", show.NAs = T,digits.pval = 3, smallest.pval = 0.05)
rownames(Project_DecConti) <- NULL
xtable(Project_DecConti, caption = "Descriptive statistics of continious variables")
## "BerufAb", "Eink"
Project_DecCate1 <- papeR::summarize(Project2[-c(16,54)],
type = "factor",
group = "ImpfZust",
smallest.pval = 0.05)
names(Project_DecCate1) <- c("Variable","Category","A",
"N (geimpft)","% (geimpft)","B",
"N (nicht geimpft)","% (nicht geimpft)","C",
"N (missing)","% (missing)","D","p.value")
Project_DecCate1 <- Project_DecCate1[-12]
Project_DecCate2 <- papeR::summarize(Project2[c(1,16,54)],
type = "factor",
group = "ImpfZust",
test = F,
smallest.pval = 0.05)
names(Project_DecCate2) <- c("Variable","Category","A",
"N (geimpft)","% (geimpft)","B",
"N (nicht geimpft)","% (nicht geimpft)","C",
"N (missing)","% (missing)")
xtable <- table(Project2[c(1,16)])
BerufAb_p <- fisher.test(xtable,simulate.p.value=TRUE)
BerufAb_p <- "<0.05"
Project_DecCate2$p.value <- BerufAb_p
Project_DecCate2$p.value[-1] <- ""
## "BerufAb", "Eink"
Project_DecCate1 <- papeR::summarize(Project2[-c(16,54)],
type = "factor",
group = "ImpfZust",
smallest.pval = 0.05)
names(Project_DecCate1) <- c("Variable","Category","A",
"N (geimpft)","% (geimpft)","B",
"N (nicht geimpft)","% (nicht geimpft)","C",
"N (missing)","% (missing)","D","p.value")
Project_DecCate1 <- Project_DecCate1[-12]
Project_DecCate2 <- papeR::summarize(Project2[c(1,16,54)],
type = "factor",
group = "ImpfZust",
test = F,
smallest.pval = 0.05)
names(Project_DecCate2) <- c("Variable","Category","A",
"N (geimpft)","% (geimpft)","B",
"N (nicht geimpft)","% (nicht geimpft)","C",
"N (missing)","% (missing)")
xtable <- table(Project2[c(1,16)])
BerufAb_p <- fisher.test(xtable,simulate.p.value=TRUE)
BerufAb_p <- "<0.05"
Project_DecCate2$p.value <- BerufAb_p
Project_DecCate2$p.value[-1] <- ""
Project_DecCate <- rbind(Project_DecCate1, Project_DecCate2)
Project_DecCate <- Project_DecCate[-c(10:11)]
names(Project_DecCate) <- c("Variable","Category"," ",
"N (geimpft)","% (geimpft)"," ",
"N (nicht geimpft)","% (nicht geimpft)"," ","p.value")
rownames(Project_DecCate) <- NULL
xtable(Project_DecConti, caption = "Descriptive statistics of continious variables")
Project_DecConti
kable(Project_DecConti, caption = "Descriptive statistics of continious variables", format = "html") %>%
kable_styling(latex_options = "striped")
kable(Project_DecCate, caption = "Descriptive statistics of categorical variables", format = "html") %>%
kable_styling(latex_options = "striped")
pander(Project_DecCate, style = 'rmarkdown')
library(pander)
pander(Project_DecCate, style = 'rmarkdown')
Project2$Abitur=NULL
Project2$Abitur[Project2$Schulab=="Abitur/ Fachabitur"]="Ja"
Project2$Abitur[Project2$Schulab=="Hauptschulabschluss"]="Nein"
Project2$Abitur[Project2$Schulab=="Realschulabschluss"]="Nein"
Project2$Abitur[Project2$Schulab=="Sonstiges"]="Nein"
Project2$Abitur <- as.factor(Project2$Abitur)
table(Project2$Abitur)
prop.test(x = c(656, 54), n = c(761, 62))
library(readxl)
Project_full <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/2021Oct15 Yimeng/results-text.xlsx")
## select variables
Project1 <- subset(Project_full,
select = c(ImpfZust,
PersoKenn,KennErkr,
`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`,
GesuZuK,GesuZuPsy,`Anam[HepB]`,`Anam[Fern]`,
`Anam[Inf]`,`Anam[Mas]`,`Anam[Mum]`,`Anam[Roet]`,
`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
Sex, age,
Schulab, BerufAb, TaetGes,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
ZeitInfo,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,
`GesuwiEin[Rki]`,`GesuwiEin[Stiko]`,
zapaQualBe,	zapaImpf, AufklAkt, ZufriedAufk,
ImpDos,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`,
PersHaus,
`InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`,
`Face2Face[Fam]`,`Face2Face[Fachpers]`,
Eink))
Project1$ImpfHistory <- ifelse(Project1$`Anam[HepB]`=="Ja"|Project1$`Anam[Fern]`=="Ja"|
Project1$`Anam[Inf]`=="Ja"|Project1$`Anam[Mas]`=="Ja"|
Project1$`Anam[Mum]`=="Ja"|Project1$`Anam[Roet]`=="Ja"|
Project1$`Anam[Pol]`=="Ja","Ja",ifelse(Project1$`Anam[Nicht]`=="Ja"|Project1$`Anam[Keine]`=="Ja","Nein",NA))
Project1$MediWork <- ifelse(Project1$`TaetGesBer[1]`=="Ja"|Project1$`TaetGesBer[3]`=="Ja"|
Project1$`TaetGesBer[4]`=="Ja"|Project1$`TaetGesBer[5]`=="Ja", "Ja",
ifelse(Project1$`TaetGesBer[2]`=="Ja"|Project1$`TaetGesBer[other]`=="Ja","Nein",NA))
Project1$PersHausAlone <-  ifelse(Project1$PersHaus==1,"Alleine leben",
ifelse(Project1$PersHaus>1,"Nicht alleine leben",NA))
FacFuna <- function(var){
factor(var, levels = c("Ja", "Nein"), labels = c("Ja", "Nein"), exclude = NULL)
}
FacFunb <- function(var){
factor(var,
levels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"),
labels = c("trifft nicht zu", "trifft eher nicht zu",
"trifft eher zu", "trifft zu"))
}
FacFunc <- function(var){
factor(var,
levels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"),
labels = c("Schlecht", "Weniger gut", "Gut", "Sehr gut"))
}
FacFund <- function(var){
factor(var,
levels = c("immer", "oft","nie", "selten"),
labels = c("immer", "oft","nie", "selten"))
}
ScoreFun <- function(var){
ifelse(var == "sehr unzufrieden", -50, ifelse(
var == "eher unzufrieden", -25, ifelse(
var == "kann dazu nichts sagen", 0, ifelse(
var == "eher zufrieden", 25, ifelse(
var == "sehr zufrieden", 50, NA
)
)
)
))
}
## Score
Project1$Score_Bund <- ScoreFun(Project1$`GesuwiEin[Bund]`)
Project1$Score_BuGe <- ScoreFun(Project1$`GesuwiEin[BuGe]`)
Project1$Score_PolBund <- ScoreFun(Project1$`GesuwiEin[PolBund]`)
Project1$Score_Pei <- ScoreFun(Project1$`GesuwiEin[Pei]`)
Project1$Score_Gesu <- ScoreFun(Project1$`GesuwiEin[Gesu]`)
Project1$Score_Rki <- ScoreFun(Project1$`GesuwiEin[Rki]`)
Project1$Score_Stiko <- ScoreFun(Project1$`GesuwiEin[Stiko]`)
## Replace the missing values with 0
Project1$Score_Bund[is.na(Project1$Score_Bund)] <- 0
Project1$Score_BuGe[is.na(Project1$Score_BuGe)] <- 0
Project1$Score_PolBund[is.na(Project1$Score_PolBund)] <- 0
Project1$Score_Pei[is.na(Project1$Score_Pei)] <- 0
Project1$Score_Gesu[is.na(Project1$Score_Gesu)] <- 0
Project1$Score_Rki[is.na(Project1$Score_Rki)] <- 0
Project1$Score_Stiko[is.na(Project1$Score_Stiko)] <- 0
Project1$Govtrust <- (Project1$Score_Bund + Project1$Score_BuGe + Project1$Score_PolBund +
Project1$Score_Pei + Project1$Score_Rki + Project1$Score_Stiko + Project1$Score_Gesu)/7
### Format the variables
Project1$Sex <- as.factor(Project1$Sex)
Project1$Schulab <- as.factor(Project1$Schulab)
Project1$BerufAb <- as.factor(Project1$BerufAb)
Project1$TaetGes <- as.factor(Project1$TaetGes)
Project1$ZeitInfo <- as.factor(Project1$ZeitInfo)
Project1$zapaQualBe <- as.factor(Project1$zapaQualBe)
Project1$ZufriedAufk <- as.factor(Project1$ZufriedAufk)
Project1$ImpDos <- as.factor(Project1$ImpDos)
Project1$PersHausAlone <- as.factor(Project1$PersHausAlone)
Project1$`Face2Face[Fam]` <- as.factor(Project1$`Face2Face[Fam]`)
Project1$`Face2Face[Fachpers]` <- as.factor(Project1$`Face2Face[Fachpers]`)
Project1$Eink <- as.factor(Project1$Eink)
Project1 <- Project1 %>%
mutate(across(c(ImpfZust,PersoKenn,KennErkr,ImpfHistory,
MediWork, zapaImpf, AufklAkt,
`ErwerbStat[1]`,`ErwerbStat[2]`,`ErwerbStat[3]`,
`ErwerbStat[4]`,`ErwerbStat[5]`,`ErwerbStat[6]`,
`ErwerbStat[7]`,`ErwerbStat[8]`,`ErwerbStat[9]`,
`ErwerbStat[10]`,`ErwerbStat[11]`,`ErwerbStat[other]`),FacFuna))
# Project1$ImpfZust <- factor(Project1$ImpfZust,
#                             levels = levels(addNA(Project1$ImpfZust)),
#                             labels = c(levels(Project1$ImpfZust), "Missing"),
#                             exclude = NULL)
Project1 <- Project1 %>%
mutate(across(c(`ImpGrund[beruf]`,`ImpGrund[risiko]`,`ImpGrund[norm]`,
`ImpGrund[gesfam]`,`ImpGrund[sozum]`,`ImpGrund[gesell]`,
`ImpGrund[geswesent]`),FacFunb))
Project1 <- Project1 %>%
mutate(across(c(GesuZuK, GesuZuPsy),FacFunc))
Project1 <- Project1 %>%
mutate(across(c( `InfoInt[Su]`,`InfoInt[Stell]`,`InfoInt[Vid]`,
`InfoInt[Pod]`,`InfoInt[TVrecht]`,`InfoInt[TVp]`,`InfoInt[Alt]`,
`InfoInt[Inst]`,`InfoInt[FB]`,`InfoInt[Twitt]`,`InfoInt[Snap]`,
`InfoInt[LinkX]`,`InfoInt[What]`,`InfoInt[Tel]`,`InfoInt[Ander]`),FacFund))
Project2 <- subset(Project1, select = -c(`Anam[HepB]`,`Anam[Fern]`,`Anam[Inf]`,`Anam[Mas]`,
`Anam[Mum]`,`Anam[Roet]`,`Anam[Pol]`,`Anam[Nicht]`,`Anam[Keine]`,
`TaetGesBer[1]`,`TaetGesBer[2]`,`TaetGesBer[3]`,
`TaetGesBer[4]`,`TaetGesBer[5]`,`TaetGesBer[other]`,
`GesuwiEin[Bund]`,`GesuwiEin[BuGe]`,`GesuwiEin[PolBund]`,
`GesuwiEin[Gesu]`,`GesuwiEin[Pei]`,`GesuwiEin[Rki]`,
`GesuwiEin[Stiko]`,
Score_Bund, Score_BuGe, Score_PolBund,
Score_Pei, Score_Gesu, Score_Rki, Score_Stiko))
library(kableExtra)
# kable(sapply(Project2,function(x)sum(is.na(x))),
#       caption = "Missing data among variables", format = "html") %>%
#   kable_styling(latex_options = "striped")
Project2$Abitur=NULL
Project2$Abitur[Project2$Schulab=="Abitur/ Fachabitur"]="Ja"
Project2$Abitur[Project2$Schulab=="Hauptschulabschluss"]="Nein"
Project2$Abitur[Project2$Schulab=="Realschulabschluss"]="Nein"
Project2$Abitur[Project2$Schulab=="Sonstiges"]="Nein"
Project2$Abitur <- as.factor(Project2$Abitur)
table(Project2$ImpfZust)
Project2 <- within(Project2, ImpfZust <- relevel(ImpfZust, ref = "Nein"))
fit.full <- glm(ImpfZust ~ age + Abitur + Eink + ImpfHistory + zapaQualBe + zapaImpf  + Govtrust,
data = Project2, family=binomial())
str(Project2$ImpfZust)
Project2$ImpfZust <- as.factor(Project2$ImpfZust)
fit.full <- glm(ImpfZust ~ age + Abitur + Eink + ImpfHistory + zapaQualBe + zapaImpf  + Govtrust,
data = Project2, family=binomial())
summary(fit.full)
Project2$ImpfZust <- factor(Project2$ImpfZust, levels = c("Nein", "Ja"))
fit.full <- glm(ImpfZust ~ age + Abitur + Eink + ImpfHistory + zapaQualBe + zapaImpf  + Govtrust,
data = Project2, family=binomial())
summary(fit.full)
Project2$ImpfZust <- factor(Project2$ImpfZust, levels = c("Nein", "Ja"))
## fit full model
fit.full <- glm(ImpfZust ~ age + Abitur + Eink + ImpfHistory + zapaQualBe + zapaImpf  + Govtrust,
data = Project2, family=binomial())
Sub1 <- glm(ImpfZust ~ age + Abitur + ImpfHistory + zapaQualBe + zapaImpf  + Govtrust,
data = Project2, family=binomial())
library(sjPlot)
tab_model(Sub1,
title="Odds ratios plot from sub model")
tab_model(fit.full,
title="Odds ratios plot from sub model")
choose(2,4)
choose(4,2)
choose(3,2)
choose(10,4)
(4+8+2+6)/4 - (8+13+7+8+12+15)/6
?as.matrix
### Generate datasets
Testdata <- as.data.frame(Krank=c(rep("krank",4), rep("gesund",5)))
rep("krank",4), rep("gesund",5))
rep(c("krank"),4)
c(rep(c("krank"),4), rep(c("gesund"),5))
### Generate datasets
Testdata <- as.data.frame(Krank=c(rep(c("krank"),4), rep(c("gesund"),5)),
Exponiert = c("Exponiert","Exponiert","Exponiert",
"Nicht Exponiert", "Exponiert", "Nicht Exponiert",
"Nicht Exponiert", "Nicht Exponiert", "Nicht Exponiert"))
### Generate datasets
Testdata <- as.data.frame(Krank=c(rep(c("krank"),4), rep(c("gesund"),5))),
Exponiert = c("Exponiert","Exponiert","Exponiert",
"Nicht Exponiert", "Exponiert", "Nicht Exponiert",
"Nicht Exponiert", "Nicht Exponiert", "Nicht Exponiert"))
as.data.frame(Krank=c(   rep(c("krank"),4), rep(c("gesund"),5) ))
### Generate datasets
Testdata <- data.frame(Krank=c(   rep(c("krank"),4), rep(c("gesund"),5) )),
Exponiert = c("Exponiert","Exponiert","Exponiert",
"Nicht Exponiert", "Exponiert", "Nicht Exponiert",
"Nicht Exponiert", "Nicht Exponiert", "Nicht Exponiert"))
### Generate datasets
Testdata <- data.frame(Krank=c(   rep(c("krank"),4), rep(c("gesund"),5) )   ,
Exponiert = c("Exponiert","Exponiert","Exponiert",
"Nicht Exponiert", "Exponiert", "Nicht Exponiert",
"Nicht Exponiert", "Nicht Exponiert", "Nicht Exponiert"))
xtabs(~ Krank + Exponiert, data=Testdata)
xtabs(~ Exponiert + Krank, data=Testdata)
fisher.test(Testdata$Exponiert, Testdata$Krank)
chisq.test(Testdata$Exponiert, Testdata$Krank)
table(Testdata)
library(coin)
## Random permutation test
chisq_test(table(Testdata), distribution = approximate(nresample=1000))
fisher.test(Testdata$Exponiert, Testdata$Krank)
